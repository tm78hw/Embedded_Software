//Define Pin Names
#define TASK_1_DP 0
#define TASK_2_DP 1
#define TASK_3_DP 2
#define TASK_4_DP 3
#define TASK_4_LED 4

//Define delay constants For Task 1
int T1H = 200;    //Time 1 High in us
int T1L = 50;     //Time 1 Low in us
int T2H = 30;     //Time 2 High in us

int Task_1_Period = 4;    //Period of Task 1 in ms
int Task_2_Period = 20;   //Period of Task 2 in ms
int Task_3_Period = 8;    //Period of Task 3 in ms
int Task_4_Period = 20;   //Increment for signal A
int Task_5_Period = 100;  //Period of Task 5 in ms

int Task_2_TH = 0;
int Task_2_TL = 0;
int Task_3_TH = 0;
int Task_3_TL = 0;
int Task_2_Freq = 0;
int Task_3_Freq = 0;
float Task_2_Freq_Int = 0;
float Task_3_Freq_Int = 0;

float Task_4_R1 = 0;
float Task_4_R2 = 0;
float Task_4_R3 = 0;
float Task_4_R4 = 0;
float Task_4_Avg = 0;

void B31DGCyclicExecutiveMonitor();
//B31DGCyclicExecutiveMonitor monitor;


void setup(void) {
  pinMode(TASK_1_DP, OUTPUT);
  pinMode(TASK_2_DP, INPUT);
  pinMode(TASK_3_DP, INPUT);
  pinMode(TASK_4_DP, INPUT);
  Serial.begin(9600);
  B31DGCyclicExecutiveMonitor.startMonitoring();
}

void Task1() {
  monitor.jobStarted(1);
  digitalWrite(TASK_1_DP, HIGH);   //TASK_1_DP is held high for duration T1H
  delayMicroseconds(T1H);
  digitalWrite(TASK_1_DP, LOW);    //Then Low for duration T1L
  delayMicroseconds(T1L);
  digitalWrite(TASK_1_DP, HIGH);   //Then high for duration T2H
  delayMicroseconds(T2H);
  digitalWrite(TASK_1_DP, LOW);
  monitor.jobEnded(1);
}

void Task2() {
  monitor.jobStarted(2);
  Task_2_TH = pulseIn(TASK_2_DP, HIGH);
  Task_2_TL = pulseIn(TASK_2_DP, LOW);
  Task_2_Freq = 1/(Task_2_TH+Task_2_TL);
  monitor.jobEnded(2);
}

void Task3() {
  monitor.jobStarted(3);
  Task_3_TH = pulseIn(TASK_3_DP, HIGH);
  Task_3_TL = pulseIn(TASK_3_DP, LOW);
  Task_3_Freq = 1/(Task_3_TH+Task_3_TL);
  monitor.jobEnded(3);
}

void Task4() {
  monitor.jobStarted(4);
  Task_4_R1 = digitalRead(TASK_4_DP);
  Task_4_R2 = digitalRead(TASK_4_DP);
  Task_4_R3 = digitalRead(TASK_4_DP);
  Task_4_R4 = digitalRead(TASK_4_DP);
  Task_4_Avg = (Task_4_R1 + Task_4_R1 + Task_4_R1 + Task_4_R1)/4;
  
  if (Task_4_Avg >= 1.65){
    digitalWrite(TASK_4_LED, HIGH);
  }
  else{
    digitalWrite(TASK_4_LED, LOW);
  }
    
  monitor.jobEnded(4);
}

void Task5() {
  monitor.jobStarted(5);
  Task_2_Freq_Int = ((Task_2_Freq-333)/700)*99.99;
  Task_3_Freq_Int = ((Task_2_Freq-500)/700)*99.99;
  Serial.print("Task 2 Frequnecy = %f, ", Task_2_Freq_Int );
  Serial.print("Task 3 Frequency = %f, ", Task_3_Freq_Int );
  monitor.jobEnded(5);
}

void loop(void)
{
// implement your cyclic executive here
Task1();
Task2();
Task3();
Task4();
Task5();
}
