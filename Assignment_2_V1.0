#include <B31DGMonitor.h>
#include <Ticker.h>
#include <Arduino.h>

//Define Pin Names
#define TASK_1_LED 5
#define TASK_2_DP 6
#define TASK_3_DP 7
#define TASK_4_DP 1
#define TASK_4_LED 0

//Define delay constants for task 1
int T1H = 200;    //Time 1 High in us
int T1L = 50;     //Time 1 Low in us
int T2H = 30;     //Time 2 High in us

//Initialize variables for tasks 2 and 3 and 4 
int Task_2_TH = 0;
int Task_3_TH = 0;
int Task_2_Freq = 0;
int Task_3_Freq = 0;
int Task_2_Freq_Int = 0;
int Task_3_Freq_Int = 0;
int Task_4_R1 = 0;
int Task_4_R2 = 0;
int Task_4_R3 = 0;
int Task_4_R4 = 0;
float Task_4_Avg = 0;

//Initiazlize frame counter
unsigned long frameCounter = 0;

//Name mointor and ticker
B31DGCyclicExecutiveMonitor monitor;
Ticker FrameTick;

void setup(void) {
  pinMode(TASK_1_LED, OUTPUT);     //Pin modes
  pinMode(TASK_2_DP, INPUT);
  pinMode(TASK_3_DP, INPUT);
  pinMode(TASK_4_DP, INPUT);
  pinMode(TASK_4_LED, OUTPUT);
  Serial.begin(9600);             //Begin serial monitor
  FrameTick.attach_ms(4, Frame);  //Define ticker size as 4ms for the "Frame" function
  Task1();                        //Run task 1 followed by fixed delay in
  delayMicroseconds(2000);        //order to fix associated with startMonitoring
  monitor.startMonitoring();      //Start monitoring scheme
}

//Define Tasks 1 - 5
void Task1() {                     //takes 286us
  monitor.jobStarted(1);
  delayMicroseconds(30);
  digitalWrite(TASK_1_LED, HIGH);   //TASK_1_DP is held high for duration T1H
  delayMicroseconds(T1H);
  digitalWrite(TASK_1_LED, LOW);    //Then Low for duration T1L
  delayMicroseconds(T1L);
  digitalWrite(TASK_1_LED, HIGH);   //Then high for duration T2H
  delayMicroseconds(T2H);
  digitalWrite(TASK_1_LED, LOW);
  monitor.jobEnded(1);
}

void Task2() {                    //takes 1000-3000us
  monitor.jobStarted(2);
  Task_2_TH = pulseIn(TASK_2_DP, HIGH, 4000);   //Measure time of high pulse
  if(Task_2_TH > 0){
    Task_2_Freq = 1000000/(Task_2_TH*2);    //Compute frequnecy
  }
  else{
    Task_2_Freq = 333;  
  }
  monitor.jobEnded(2);
}

void Task3() {                    //takes 1000-2000us
  monitor.jobStarted(3);
  Task_3_TH = pulseIn(TASK_3_DP, HIGH, 3000);   //Measure time of high pulse
  if(Task_3_TH > 0){
     Task_3_Freq = 1000000/(Task_3_TH*2);    //Compute frequnecy
  }
  else{
    Task_3_Freq = 500;  
  }
  monitor.jobEnded(3);
}

void Task4() {                     //Takes 228us
  monitor.jobStarted(4);
  if(frameCounter % 20 == 0){
    Task_4_R1 = analogRead(TASK_4_DP);  //Measure four seperate analogue readings
  }
  if(frameCounter % 20 == 5){
    Task_4_R2 = analogRead(TASK_4_DP);  //Store each one in a seperate float
  }
  if(frameCounter % 20 == 10){
    Task_4_R3 = analogRead(TASK_4_DP);
  }
  if(frameCounter % 20== 15){
    Task_4_R4 = analogRead(TASK_4_DP);
  }
  
  //Then caclulate average of the 4 values and convert to voltage value
  Task_4_Avg = (Task_4_R1 + Task_4_R1 + Task_4_R1 + Task_4_R1)/(4*4095/3.3);

  if (Task_4_Avg >= 1.65){      //light LED when the voltage is above 1.65V
    digitalWrite(TASK_4_LED, HIGH);
  }
  else{                         //Turn off LED when voltage is below 1.65V
    digitalWrite(TASK_4_LED, LOW);
  }
    
  monitor.jobEnded(4);
}

void Task5() {                    //Takes 122us
  if(frameCounter % 25 == 0){           //Run task only at intervals of 100us
    monitor.jobStarted(5);
    Task_2_Freq_Int = map(Task_2_Freq,333,1000, 0, 99);   //Limit integers to only
    Task_3_Freq_Int = map(Task_3_Freq,500,1000, 0, 99);   //between 0 and 99.99
    Task_2_Freq_Int = constrain(Task_2_Freq_Int,0,99);   //Limit integers to only
    Task_3_Freq_Int = constrain(Task_3_Freq_Int,0,99);   //between 0 and 99.99
    
    Serial.printf("%d,", Task_2_Freq_Int );   //Serial print
    Serial.printf("%d\n", Task_3_Freq_Int ); //integers
    monitor.jobEnded(5);
  }   
}

//Define Frame function
void Frame(){   
   unsigned int slot = frameCounter % 10; //define repeating frame numbers from 0 to 9
    //Tasks are organized so they do not inerfere with other tasks
    //longest tasks are 2 and 3 so these are kep t apart
    //Task 5 will be called every 5 frames but will only run every 25
    //Task 5 will then check to see if it is frame 25, 50, 75 etc.
   switch (slot) {  
     case 0: Task1();                Task3();     Task4();   Task5();  break;
     case 1: Task1();    Task2();                                      break;
     case 2: Task1();                Task3();                          break;
     case 3: Task1();                                                  break;
     case 4: Task1();                Task3();                          break;
     case 5: Task1();                             Task4();   Task5();  break;
     case 6: Task1();                Task3();                          break;
     case 7: Task1();    Task2();                                      break;
     case 8: Task1();                Task3();                          break;
     case 9: Task1();                                                  break;
  }
  
  frameCounter = frameCounter + 1  ; //frame counter will increment until its maximum value
}

//Loop to run function
void loop(void) // Single time slot function of the Cyclic Executive (repeating)
{
}
