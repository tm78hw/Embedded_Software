#include <B31DGMonitor.h>
#include <Ticker.h>

//Define Pin Names
#define TASK_1_DP 5
#define TASK_2_DP 6
#define TASK_3_DP 7
#define TASK_4_DP 1
#define TASK_4_LED 0

//Define delay constants For Task 1
int T1H = 200;    //Time 1 High in us
int T1L = 50;     //Time 1 Low in us
int T2H = 30;     //Time 2 High in us

int Task_1_Period = 4;    //Period of Task 1 in ms
int Task_2_Period = 20;   //Period of Task 2 in ms
int Task_3_Period = 8;    //Period of Task 3 in ms
int Task_4_Period = 20;   //Increment for signal A
int Task_5_Period = 100;  //Period of Task 5 in ms

float Task_2_TH = 0;
float Task_2_TL = 0;
float Task_3_TH = 0;
float Task_3_TL = 0;
float Task_2_Freq = 0;
float Task_3_Freq = 0;
float Task_2_Freq_Int = 0;
float Task_3_Freq_Int = 0;

float Task_4_R1 = 0;
float Task_4_R2 = 0;
float Task_4_R3 = 0;
float Task_4_R4 = 0;
float Task_4_Avg = 0;

int i = 0;
unsigned long frameCounter = 0;
int delayTasks = 50;

B31DGCyclicExecutiveMonitor monitor;
Ticker FrameTick;

void setup(void) {
  pinMode(TASK_1_DP, OUTPUT);
  pinMode(TASK_2_DP, INPUT);
  pinMode(TASK_3_DP, INPUT);
  pinMode(TASK_4_DP, INPUT);
  pinMode(TASK_4_LED, OUTPUT);
  Serial.begin(9600);
  FrameTick.attach_ms(4, Frame);
  Task1();
  delayMicroseconds(2000);
  monitor.startMonitoring();
}

void Task1() {    //takes 286us
  monitor.jobStarted(1);
  delayMicroseconds(30);
  digitalWrite(TASK_1_DP, HIGH);   //TASK_1_DP is held high for duration T1H
  delayMicroseconds(T1H);
  digitalWrite(TASK_1_DP, LOW);    //Then Low for duration T1L
  delayMicroseconds(T1L);
  digitalWrite(TASK_1_DP, HIGH);   //Then high for duration T2H
  delayMicroseconds(T2H);
  digitalWrite(TASK_1_DP, LOW);
  monitor.jobEnded(1);
}

void Task2() {    // takes
  monitor.jobStarted(2);
  Task_2_TH = pulseIn(TASK_2_DP, HIGH);
  //Task_2_TL = pulseIn(TASK_2_DP, LOW);
  Task_2_Freq = 1000000/(Task_2_TH*2);
  //Serial.printf("Task_2_TH = %f, \n", Task_2_TH );
  //Serial.printf("Task_2_TL = %f, \n", Task_2_TL );
  //Serial.printf("Task_2_Freq = %f, \n", Task_2_Freq );
  monitor.jobEnded(2);
}

void Task3() {
  monitor.jobStarted(3);
  Task_3_TH = pulseIn(TASK_3_DP, HIGH);
  //Task_3_TL = pulseIn(TASK_3_DP, LOW);
  Task_3_Freq = 1000000/(Task_3_TH*2);
  //Serial.printf("Task_3_Freq = %f, \n", Task_3_Freq );
  monitor.jobEnded(3);
}

void Task4() {    //Takes 228us
  monitor.jobStarted(4);
  Task_4_R1 = analogRead(TASK_4_DP);
  Task_4_R2 = analogRead(TASK_4_DP);
  Task_4_R3 = analogRead(TASK_4_DP);
  Task_4_R4 = analogRead(TASK_4_DP);
  Task_4_Avg = (Task_4_R1 + Task_4_R1 + Task_4_R1 + Task_4_R1)/(4*4095/3.3);
  //Serial.printf("Task_4_Avg = %f, \n", Task_4_Avg );
  
  if (Task_4_Avg >= 1.65){
    digitalWrite(TASK_4_LED, HIGH);
  }
  else{
    digitalWrite(TASK_4_LED, LOW);
  }
    
  monitor.jobEnded(4);
}

void Task5() { //Takes 122us
  if(frameCounter % 25 == 0){ 
    monitor.jobStarted(5);
    Task_2_Freq_Int = ((Task_2_Freq-333)/667)*99.99;
    Task_3_Freq_Int = ((Task_3_Freq-500)/500)*99.99;
    Task_2_Freq_Int = constrain(Task_2_Freq_Int,0,99.99);
    Task_3_Freq_Int = constrain(Task_3_Freq_Int,0,99.99);
    Serial.printf("Task 2 Frequnecy = %.2f, ", Task_2_Freq_Int );
    Serial.printf("Task 3 Frequency = %.2f, \n", Task_3_Freq_Int );
    monitor.jobEnded(5);
  }   
}

void Frame(){   
   unsigned int slot = frameCounter % 10;
   switch (slot) {
     case 0: Task1();                Task3();     Task4();   Task5();  break;
     case 1: Task1();    Task2();                                      break;
     case 2: Task1();                Task3();                          break;
     case 3: Task1();                                                  break;
     case 4: Task1();                Task3();                          break;
     case 5: Task1();                             Task4();   Task5();  break;
     case 6: Task1();                Task3();                          break;
     case 7: Task1();    Task2();                                      break;
     case 8: Task1();                Task3();                          break;
     case 9: Task1();                                                  break;
  }
  
  frameCounter = frameCounter + 1  ;
}


void loop(void) // Single time slot function of the Cyclic Executive (repeating)
{
}
