#include <B31DGMonitor.h>
#include <Arduino.h>

//Define Pin Names
#define TASK_1_DP 5
#define TASK_2_DP 6
#define TASK_3_DP 7
#define TASK_4_DP 1
#define TASK_4_LED 0
#define TASK_6_BUTTON 2
#define TASK_7_LED 3

//Initiate variables to count number of runs and Violations for each task
//As these are used for the test it does not matter that they are global
//variables that take up memory, these would simply be commented out
//were the code to be run normally
int task1Runs, task2Runs, task3Runs, task4Runs, task5Runs, task6Runs, task7Runs;
int task1Violations, task2Violations, task3Violations, task4Violations,
    task5Violations, task6Violations, task7Violations;

// Declare a mutex Semaphore Handle  to ensure only one Task is accessing 
// common resource at any given time
SemaphoreHandle_t semaphore;

// Declare the event queue handle for tasks 6 and 7
QueueHandle_t queueLED;

// Define the struct for tasks 2 and 3
typedef struct {
    int task2;
    int task3;
} frequencyGlobalStructure;

// Define a global variable of type frequencyGlobalStructure
frequencyGlobalStructure freqStruct;

void setup(void) {
  pinMode(TASK_1_DP, OUTPUT);     //Pin modes
  pinMode(TASK_2_DP, INPUT);
  pinMode(TASK_3_DP, INPUT);
  pinMode(TASK_4_DP, INPUT);
  pinMode(TASK_4_LED, OUTPUT);
  pinMode(TASK_6_BUTTON, INPUT_PULLUP);
  pinMode(TASK_7_LED, OUTPUT);
  Serial.begin(9600);             //Begin serial monitor with baud rate 9600

  // Check to confirm that the Serial Semaphore has not already been created.
  if ( semaphore == NULL ) 
  {
    semaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore
    
  if ( ( semaphore ) != NULL )
    xSemaphoreGive( ( semaphore ) );  // Make the common resources available,
  }                                          // by "Giving" the Semaphore

  //Create 8 Tasks to run independently, set the stack size to 2500 which is
  //big ennough for each task while leaving and extra ~700 bytes in case
  //extra memory is required, set the priority according to the task with 
  //smallest period which must run more often if it to meet its deadline
  xTaskCreate(Task1,  "Task1",  2500  ,  NULL,  1  ,  NULL );
  xTaskCreate(Task2,  "Task2",  2500  ,  NULL,  3  ,  NULL );
  xTaskCreate(Task3,  "Task3",  2500  ,  NULL,  2  ,  NULL );
  xTaskCreate(Task4,  "Task4",  2500  ,  NULL,  4  ,  NULL );
  xTaskCreate(Task5,  "Task5",  2500  ,  NULL,  5  ,  NULL );
  xTaskCreate(Task6,  "Task6",  2500  ,  NULL,  6  ,  NULL );
  xTaskCreate(Task7,  "Task7",  2500  ,  NULL,  7  ,  NULL );
  xTaskCreate(Task8,  "Task8",  2500  ,  NULL,  8  ,  NULL );
}

//Loop to run function
void loop(void)
{
  //Empty as tasks are run seperately uing scheduler
}

/////////////////////////////// Define Tasks 1 - 8 ///////////////////////////////
void Task1(void *pvParameters) { 
  TickType_t currentExecutionTime;
  const TickType_t taskPeriod = pdMS_TO_TICKS( 4 ); // Task period (in milliseconds)
  
  // Initialize currentExecutionTime to the current tick count
  currentExecutionTime = xTaskGetTickCount();
  
  for (;;) // A Task shall never return or exit.
  {
    // If the semaphore is not available, wait 200 ticks to see if it becomes free
    if ( xSemaphoreTake( semaphore, ( TickType_t ) 200 ) == pdTRUE )
    {
      //////////////////////// Calculate total number runs //////////////////////
      task1Runs = task1Runs+1;   //Increment number of runs
      
      ////////////////// Calculate total number of violations ///////////////////
      int currentFrame, lastFrame;
      if(currentFrame == NULL){
        currentFrame = currentExecutionTime; //initialize first frame at the time 
      }                                      //the task was first run
      currentFrame = currentFrame + taskPeriod; //increment current frame by exactly 100ms

      // Check if the task has run every 100ms
      if (currentExecutionTime > currentFrame || currentExecutionTime < lastFrame) {
        task1Violations = task1Violations + 1;     // Task has not run every 100ms
      } 

      lastFrame = currentFrame; //Save current frame as the last frame for the next run
    
      ////////////////////////////// Run Task 2 //////////////////////////////
      const int time1High = 200;    //Time 1 High in us
      const int time1Low = 50;     //Time 1 Low in us
      const int time2High = 30;     //Time 2 High in us
      delayMicroseconds(30);
      digitalWrite(TASK_1_DP, HIGH);   //TASK_1_DP is held high for 200us
      delayMicroseconds(time1High);
      digitalWrite(TASK_1_DP, LOW);    //Then Low for 50us
      delayMicroseconds(time1Low);
      digitalWrite(TASK_1_DP, HIGH);   //Then high for 30us
      delayMicroseconds(time2High);
      digitalWrite(TASK_1_DP, LOW);

      xSemaphoreGive( semaphore ); // Now free the semaphore
      
      //uint32_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
      //printf("Task 1 stack high water mark: %u\n", uxHighWaterMark);
    }

    // Wait until the end of the task period
    vTaskDelayUntil( &currentExecutionTime, taskPeriod );
  }
}

void Task2(void *pvParameters) {
  TickType_t currentExecutionTime;
  const TickType_t taskPeriod = pdMS_TO_TICKS( 20 ); // Task period (in milliseconds)

  // Initialize currentExecutionTime to the current tick count
  currentExecutionTime = xTaskGetTickCount();
  
  for (;;)
  {
    // If the semaphore is not available, wait 200 ticks to see if it becomes free
    if ( xSemaphoreTake( semaphore, ( TickType_t ) 200 ) == pdTRUE )
    {
      /////////////////////// Calculate total number runs ///////////////////////
      task2Runs = task2Runs+1;   //Increment number of runs

      ////////////////// Calculate total number of violations //////////////////
      int currentFrame, lastFrame;
      if(currentFrame == NULL){
        currentFrame = currentExecutionTime; //initialize first frame at the time
      }                                      //the task was first run
      currentFrame = currentFrame + taskPeriod; //increment current frame by exactly 100ms

      // Check if the task to test has run every 100ms
      if (currentExecutionTime > currentFrame || currentExecutionTime < lastFrame) {
        task2Violations = task2Violations + 1;     // Task has not run every 100ms
      } 

      lastFrame = currentFrame; //Save current frame as the last frame for the next run
      
      ////////////////////////////// Run Task 2 //////////////////////////////
      int task2TimeHigh;  //Initialize variables
      task2TimeHigh = pulseIn(TASK_2_DP, HIGH, 4000);   //Measure time of high pulse
      
      if(task2TimeHigh > 0){
        freqStruct.task2 = 1000000/(task2TimeHigh*2);    //Compute frequnecy
      }
      else{
        freqStruct.task2 = 333;  
      }

      xSemaphoreGive( semaphore ); // Now free the semaphore

      //uint32_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
      //printf("Task 2 stack high water mark: %u bytes\n", uxHighWaterMark);
    }

    // Wait until the end of the task period
    vTaskDelayUntil( &currentExecutionTime, taskPeriod );
  }
}

void Task3(void *pvParameters) { 
  TickType_t currentExecutionTime;
  const TickType_t taskPeriod = pdMS_TO_TICKS( 8 ); // Task period (in milliseconds)

  // Initialize currentExecutionTime to the current tick count
  currentExecutionTime = xTaskGetTickCount();
  
  for (;;)
  {
    // If the semaphore is not available, wait 200 ticks to see if it becomes free
    if ( xSemaphoreTake( semaphore, ( TickType_t ) 200 ) == pdTRUE )
    {
      /////////////////////// Calculate total number runs ///////////////////////
      task3Runs = task3Runs+1;   //Increment number of runs

      ////////////////// Calculate total number of violations //////////////////
      int currentFrame, lastFrame;
      if(currentFrame == NULL){
        currentFrame = currentExecutionTime; //initialize first frame at the time
      }                                      //the task was first run
      currentFrame = currentFrame + taskPeriod; //increment current frame by exactly 100ms

      // Check if the task to test has run every 100ms
      if (currentExecutionTime > currentFrame || currentExecutionTime < lastFrame) {
        task3Violations = task3Violations + 1;     // Task has not run every 100ms
      } 

      lastFrame = currentFrame; //Save current frame as the last frame for the next run

      /////////////////////////////// Run Task 3 ///////////////////////////////
      int task3TimeHigh;  //Initialize variables
      task3TimeHigh = pulseIn(TASK_3_DP, HIGH, 3000);   //Measure time of high pulse
      
      if(task3TimeHigh > 0){
        freqStruct.task3 = 1000000/(task3TimeHigh*2);    //Compute frequnecy
      }
      else{
        freqStruct.task3 = 500;  
      }
      
      xSemaphoreGive( semaphore ); // Now free the semaphore
      //uint32_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
      //printf("Task 3 stack high water mark: %u bytes\n", uxHighWaterMark);
      
    }

    // Wait until the end of the task period
    vTaskDelayUntil( &currentExecutionTime, taskPeriod );
  }
}

void Task4(void *pvParameters) {
  
  TickType_t currentExecutionTime;
  const TickType_t taskPeriod = pdMS_TO_TICKS( 20 ); // Task period (in milliseconds)

  // Initialize currentExecutionTime to the current tick count
  currentExecutionTime = xTaskGetTickCount();
  
  for (;;)
  {
    // If the semaphore is not available, wait 200 ticks to see if it becomes free
    if ( xSemaphoreTake( semaphore, ( TickType_t ) 200 ) == pdTRUE )
    {
      /////////////////////// Calculate total number runs ///////////////////////
      task4Runs = task4Runs+1;   //Increment number of runs

      
      ////////////////// Calculate total number of violations //////////////////
      int currentFrame, lastFrame;
      if(currentFrame == NULL){
        currentFrame = currentExecutionTime; //initialize first frame at the time
      }                                      //the task was first run
      currentFrame = currentFrame + taskPeriod; //increment current frame by exactly 100ms

      // Check if the task to test has run every 100ms
      if (currentExecutionTime > currentFrame || currentExecutionTime < lastFrame) {
        task4Violations = task4Violations + 1;     // Task has not run every 100ms
      } 

      lastFrame = currentFrame; //Save current frame as the last frame for the next run

      ////////////////////////////// Run Task 4 //////////////////////////////
      int sigRegister1, sigRegister2, sigRegister3, sigRegister4;
      float sigRegisterAvg;
      
      if(task4Runs%4 == 0){
        sigRegister1 = analogRead(TASK_4_DP);  //Measure four seperate analogue readings
      }
      
      if(task4Runs%4 == 1){
        sigRegister2 = analogRead(TASK_4_DP);  //Store each one in a seperate register
      }
      
      if(task4Runs%4 == 2){
        sigRegister3 = analogRead(TASK_4_DP); 
      }

      if(task4Runs%4 == 3){
        sigRegister4 = analogRead(TASK_4_DP); 
      }

      //Then caclulate average of the 4 values and convert to voltage value
      sigRegisterAvg = (sigRegister1 + sigRegister2 + sigRegister3 + sigRegister4)/(4*4095/3.3);
    
      if (sigRegisterAvg >= 1.65){      //light LED when the voltage is above 1.65V
        digitalWrite(TASK_4_LED, HIGH);
      }
      else{                         //Turn off LED when voltage is below 1.65V
        digitalWrite(TASK_4_LED, LOW);
      }

      xSemaphoreGive( semaphore ); // Now free the semaphore
      
      //uint32_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
      //printf("Task 4 stack high water mark: %u bytes\n", uxHighWaterMark);
    }
    // Wait until the end of the task period
    vTaskDelayUntil( &currentExecutionTime, taskPeriod );
  }
}

void Task5(void *pvParameters) {
  
  TickType_t currentExecutionTime;
  const TickType_t taskPeriod = pdMS_TO_TICKS( 100 ); // Task period (in milliseconds)

  // Initialize currentExecutionTime to the current tick count
  currentExecutionTime = xTaskGetTickCount();
  
  for (;;)
  {
    // If the semaphore is not available, wait 200 ticks to see if it becomes free
    if ( xSemaphoreTake( semaphore, ( TickType_t ) 200 ) == pdTRUE )
    {
      ///////////////////// Calculate total number of runs /////////////////////
      task5Runs = task5Runs+1;   //Increment number of runs

      ////////////////// Calculate total number of violations //////////////////
      int currentFrame, lastFrame;
      if(currentFrame == NULL){
        currentFrame = currentExecutionTime; //initialize first frame at the time
      }                                      //the task was first run
      currentFrame = currentFrame + taskPeriod; //increment current frame by exactly 100ms

      // Check if the task to test has run every 100ms
      if (currentExecutionTime > currentFrame || currentExecutionTime < lastFrame) {
        task5Violations = task5Violations + 1;     // Task has not run every 100ms
      } 

      lastFrame = currentFrame; //Save current frame as the last frame for the next run
 
      ///////////////////////////// Perform Task 5 /////////////////////////////
      int task2FreqInteger, task3FreqInteger;
      task2FreqInteger = map(freqStruct.task2,333,1000, 0, 99);   //Limit integers to only
      task3FreqInteger = map(freqStruct.task3,500,1000, 0, 99);   //between 0 and 99
      task2FreqInteger = constrain(task2FreqInteger,0,99);   //Constrain integers to only
      task3FreqInteger = constrain(task3FreqInteger,0,99);   //between 0 and 99
      
      Serial.printf("%d,", task2FreqInteger );   //Serial print integers
      Serial.printf("%d\n", task3FreqInteger );
    
      xSemaphoreGive( semaphore ); // Now free the semaphore
      
      //uint32_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
      //printf("Task 5 stack high water mark: %u bytes\n", uxHighWaterMark);  
      }
    // Wait until the end of the task period
    vTaskDelayUntil( &currentExecutionTime, taskPeriod );
  }
}

void Task6(void *pvParameters) {
  
  TickType_t currentExecutionTime;
  const TickType_t taskPeriod = pdMS_TO_TICKS( 100 ); // Task period (in milliseconds)

  // Initialize currentExecutionTime to the current tick count
  currentExecutionTime = xTaskGetTickCount();
   
  for (;;)
  {
    // If the semaphore is not available, wait 200 ticks to see if it becomes free
    if ( xSemaphoreTake( semaphore, ( TickType_t ) 200 ) == pdTRUE )
    {

      ////////////////////// Calculate total number runs //////////////////////
      task6Runs = task6Runs+1;   //Increment number of runs

      ////////////////// Calculate total number of violations //////////////////
      int currentFrame, lastFrame;
      if(currentFrame == NULL){
        currentFrame = currentExecutionTime; //initialize first frame at the time
      }                                      //the task was first run
      currentFrame = currentFrame + taskPeriod; //increment current frame by exactly 100ms

      // Check if the task to test has run every 100ms
      if (currentExecutionTime > currentFrame || currentExecutionTime < lastFrame) {
        task6Violations = task6Violations + 1;     // Task has not run every 100ms
      } 
      
      lastFrame = currentFrame; //Save current frame as the last frame for the next run
 
      //////////////////////////// Perform Task 6 ////////////////////////////
      int toggleButton;
      queueLED = xQueueCreate(10, sizeof(int));  // Create the event queue with a size of 10
      if(digitalRead(TASK_6_BUTTON)==HIGH){  //When Button is pressed
          toggleButton=1;                    //set toggleButton to 1
          xQueueSend(queueLED, &toggleButton, 0);  // Send the event to the queue                                     
      }
      if(digitalRead(TASK_6_BUTTON)==LOW){  //When Button is not pressed 
          toggleButton=0;                   //set toggleButton to 0
          xQueueSend(queueLED, &toggleButton, 0);  // Send the event to the queue                                      
      }

      xSemaphoreGive( semaphore ); // Now free the semaphore
      //uint32_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
      //printf("Task 6 stack high water mark: %u bytes\n", uxHighWaterMark);
      
    }

    // Wait until the end of the task period
    vTaskDelayUntil( &currentExecutionTime, taskPeriod );
  }
}

void Task7(void *pvParameters) {
  
    TickType_t currentExecutionTime;
    const TickType_t taskPeriod = pdMS_TO_TICKS( 100 ); // Task period (in milliseconds)

    // Initialize currentExecutionTime to the current tick count
    currentExecutionTime = xTaskGetTickCount();
  
  for (;;)
  {
    // If the semaphore is not available, wait 200 ticks to see if it becomes free
    if ( xSemaphoreTake( semaphore, ( TickType_t ) 200 ) == pdTRUE )
    {
      ////////////////////// Calculate total number runs ///////////////////////   
      task7Runs = task7Runs+1;   //Increment number of runs

      ////////////////// Calculate total number of violations //////////////////
      int currentFrame, lastFrame;
      if(currentFrame == NULL){
        currentFrame = currentExecutionTime; //initialize first frame at the time
      }                                      //the task was first run
      currentFrame = currentFrame + taskPeriod; //increment current frame by exactly 100ms
      
      /*
      Serial.print(taskPeriod);
      Serial.print('\n');
      Serial.print(currentFrame);
      Serial.print('\n');
      */

      // Check if the task to test has run every 100ms
      if (currentExecutionTime > currentFrame || currentExecutionTime < lastFrame) {
        task7Violations = task7Violations + 1;     // Task has not run every 100ms
      } 

      lastFrame = currentFrame; //Save current frame as the last frame for the next run
        
 
      //////////////////////////// Perform Task 7 ////////////////////////////
      int toggleLED;
      xQueueReceive(queueLED, &toggleLED, 1);  // Wait for an event to be received from the queue
      if(toggleLED==1){   //When a 1 is received turn on LED
          digitalWrite(TASK_7_LED, HIGH);                                     
      }
      if(toggleLED==0){   //When a 0 is received turn off LED
          digitalWrite(TASK_7_LED, LOW);                                     
      }

      xSemaphoreGive( semaphore ); // Now free the semaphore
      
      //uint32_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
      //printf("Task 7 stack high water mark: %u bytes\n", uxHighWaterMark);
      
    }

    // Wait until the end of the task period
    vTaskDelayUntil( &currentExecutionTime, taskPeriod );
  }
}

void Task8(void *pvParameters) {
  
    TickType_t currentExecutionTime;
    const TickType_t taskPeriod = pdMS_TO_TICKS( 10000 ); // Task period (in milliseconds)

    // Initialize currentExecutionTime to the current tick count
    currentExecutionTime = xTaskGetTickCount();
  
  for (;;)
  {
    // If the semaphore is not available, wait 200 ticks to see if it becomes free
    if ( xSemaphoreTake( semaphore, ( TickType_t ) 200 ) == pdTRUE )
    {
      //Define variables to store new and old runs
      int task1RunsNew, task1RunsOld;
      int task2RunsNew, task2RunsOld;
      int task3RunsNew, task3RunsOld;
      int task4RunsNew, task4RunsOld;
      int task5RunsNew, task5RunsOld;
      int task6RunsNew, task6RunsOld;
      int task7RunsNew, task7RunsOld;

      //Find current number of runs achieved in 10s
      task1RunsNew = task1Runs - task1RunsOld;
      task2RunsNew = task2Runs - task2RunsOld;
      task3RunsNew = task3Runs - task3RunsOld;
      task4RunsNew = task4Runs - task4RunsOld;
      task5RunsNew = task5Runs - task5RunsOld;
      task6RunsNew = task6Runs - task6RunsOld;
      task7RunsNew = task7Runs - task7RunsOld;

      //Serial Print the performance summary
      Serial.printf("PERFORMANCE SUMMARY:\n");    
      Serial.printf("Task 1 Iterations:%d/%d\n",task1Violations, task1RunsNew);
      Serial.printf("Task 2 Iterations:%d/%d\n",task2Violations, task2RunsNew);
      Serial.printf("Task 3 Iterations:%d/%d\n",task3Violations, task3RunsNew);
      Serial.printf("Task 4 Iterations:%d/%d\n",task4Violations, task4RunsNew);
      Serial.printf("Task 5 Iterations:%d/%d\n",task5Violations, task5RunsNew);
      Serial.printf("Task 6 Iterations:%d/%d\n",task6Violations, task6RunsNew);
      Serial.printf("Task 7 Iterations:%d/%d\n",task7Violations, task7RunsNew);

      //Store old number of runs for next iteration
      task1RunsOld = task1Runs;
      task2RunsOld = task2Runs;
      task3RunsOld = task3Runs;
      task4RunsOld = task4Runs;
      task5RunsOld = task5Runs;
      task6RunsOld = task6Runs;
      task7RunsOld = task7Runs;

      //Reset task violations to zero
      task1Violations = 0;
      task2Violations = 0;
      task3Violations = 0;
      task4Violations = 0;
      task5Violations = 0;
      task6Violations = 0;
      task7Violations = 0;

      xSemaphoreGive( semaphore ); // Now free the semaphore
      
      //uint32_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
      //printf("Task 8 stack high water mark: %u bytes\n", uxHighWaterMark);
      
    }

    // Wait until the end of the task period
    vTaskDelayUntil( &currentExecutionTime, taskPeriod );
  }
}
